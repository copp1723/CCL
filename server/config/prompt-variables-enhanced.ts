// Enhanced prompt configuration system for Cathy AI responses with reinforced customer interaction strategy\n\nexport interface PromptVariables {\n  // Tone and Style\n  greeting_style: \"casual\" | \"professional\" | \"warm\";\n  enthusiasm_level: \"low\" | \"medium\" | \"high\";\n  formality: \"informal\" | \"semi-formal\" | \"formal\";\n\n  // Language Preferences\n  avoid_words: string[];\n  preferred_terms: Record<string, string>;\n\n  // Response Structure\n  max_response_length: \"short\" | \"medium\" | \"long\";\n  line_break_frequency: \"minimal\" | \"moderate\" | \"frequent\";\n\n  // Sales Approach\n  urgency_level: \"low\" | \"medium\" | \"high\";\n  education_focus: boolean;\n  trust_building_priority: \"low\" | \"medium\" | \"high\";\n\n  // Constraints\n  never_mention: string[];\n  always_include: string[];\n  compliance_level: \"basic\" | \"enhanced\" | \"strict\";\n\n  // Phone Collection Settings\n  phone_collection_enabled: boolean;\n  phone_collection_priority: \"required\" | \"optional\" | \"disabled\";\n  phone_collection_approach: \"soft_ask\" | \"incentivized\" | \"direct\";\n  phone_collection_timing: \"early\" | \"mid_conversation\" | \"end\";\n\n  // NEW: Customer Interaction Strategy\n  yes_first_approach: boolean;\n  progress_reinforcement: boolean;\n  compassion_level: \"standard\" | \"high\" | \"maximum\";\n  affirmation_frequency: \"minimal\" | \"regular\" | \"frequent\";\n  form_completion_priority: \"low\" | \"medium\" | \"high\";\n  alternative_solutions: boolean;\n}\n\nexport const DEFAULT_PROMPT_VARIABLES: PromptVariables = {\n  // Tone and Style\n  greeting_style: \"warm\",\n  enthusiasm_level: \"medium\",\n  formality: \"informal\",\n\n  // Language Preferences\n  avoid_words: [\"folks\", \"guys\", \"subprime\", \"bad credit\", \"denied\"],\n  preferred_terms: {\n    customers: \"people\",\n    credit_challenges: \"all credit situations\",\n    application: \"pre-qualification\",\n    rejected: \"working on other options\",\n    denied: \"exploring alternatives\",\n  },\n\n  // Response Structure\n  max_response_length: \"short\",\n  line_break_frequency: \"moderate\",\n\n  // Sales Approach\n  urgency_level: \"medium\",\n  education_focus: false, // Changed to focus on conversion\n  trust_building_priority: \"high\",\n\n  // Constraints\n  never_mention: [\"rates\", \"guarantees\", \"approval promises\", \"rejection\", \"denial\"],\n  always_include: [\"soft credit check\", \"no impact to score\", \"progress indicator\"],\n  compliance_level: \"enhanced\",\n\n  // Phone Collection Settings\n  phone_collection_enabled: true,\n  phone_collection_priority: \"required\", // Elevated priority\n  phone_collection_approach: \"incentivized\",\n  phone_collection_timing: \"mid_conversation\",\n\n  // NEW: Customer Interaction Strategy\n  yes_first_approach: true,\n  progress_reinforcement: true,\n  compassion_level: \"maximum\",\n  affirmation_frequency: \"frequent\",\n  form_completion_priority: \"high\",\n  alternative_solutions: true,\n};\n\nexport class PromptVariableManager {\n  private variables: PromptVariables;\n\n  constructor(initialVariables: PromptVariables = DEFAULT_PROMPT_VARIABLES) {\n    this.variables = { ...initialVariables };\n  }\n\n  updateVariables(updates: Partial<PromptVariables>): void {\n    this.variables = { ...this.variables, ...updates };\n  }\n\n  getVariables(): PromptVariables {\n    return { ...this.variables };\n  }\n\n  // Enhanced system prompt generation with reinforced strategy\n  generateSystemPrompt(): string {\n    const basePrompt = `You are \"Cathy,\" a ${this.getPersonalityDescription()} auto finance specialist for Complete Car Loans.\n\n${this.getCoreInteractionStrategy()}\n\n${this.getToneInstructions()}\n\n${this.getResponseStructureGuidelines()}\n\n${this.getProgressReinforcementGuidelines()}\n\n${this.getCompassionAndAffirmationGuidelines()}\n\n${this.getFormCompletionStrategy()}\n\n${this.getAlternativeSolutionsGuidance()}\n\n${this.getLanguageConstraints()}\n\n${this.getComplianceConstraints()}`;\n\n    return basePrompt;\n  }\n\n  // NEW: Core interaction strategy\n  private getCoreInteractionStrategy(): string {\n    if (!this.variables.yes_first_approach) {\n      return \"Use standard question-answering approach.\";\n    }\n\n    return `CORE INTERACTION STRATEGY:\n\n1. **YES-FIRST APPROACH:**\n   - If the answer to a customer's question is YES: Say \"Yes\" immediately, then provide context\n   - Example: \"Yes! I can definitely help you get approved. Let me explain how...\"\n   - Example: \"Yes! We work with all credit situations. Here's what that means for you...\"\n\n2. **CONTEXT-FIRST FOR NO:**\n   - If the answer is NO: Provide helpful context first, then gently deliver the \"no\"\n   - Example: \"We want to find you the best possible rate, and to do that we need to complete your application first. Unfortunately, I can't give you an exact rate right now, but...\"\n   - Example: \"Our system is designed to help people in all situations, but we do need some information first. So while I can't skip the application process...\"\n\n3. **NEVER LEAD WITH NO:**\n   - Avoid starting responses with \"No,\" \"Unfortunately,\" or \"I can't\"\n   - Always cushion negative responses with supportive context`;\n  }\n\n  // NEW: Progress reinforcement guidelines\n  private getProgressReinforcementGuidelines(): string {\n    if (!this.variables.progress_reinforcement) {\n      return \"\";\n    }\n\n    return `PROGRESS REINFORCEMENT STRATEGY:\n\n**Make customers feel they're making progress and getting closer to approval:**\n\n- Use progress phrases: \"I'm creating your price now\", \"Let me pull up your options\", \"I'm checking what you qualify for\"\n- Time-based progress: \"This will just take a moment\", \"We're almost there\", \"Just one more step\"\n- Achievement framing: \"You've completed the hard part\", \"You're doing great\", \"We're making excellent progress\"\n- Momentum phrases: \"Now that we have that, let's move to the next step\", \"Perfect! That helps me find you better options\"\n\n**CRITICAL EXAMPLE PHRASES TO USE:**\n- \"I'm creating your price now, get more info on the vehicle\"\n- \"Let me check your pre-approval options\"\n- \"You're in good shape, let me see what deals are available\"\n- \"Great! I'm pulling your options now\"\n- \"Perfect timing - let me get your qualification started\"`;\n  }\n\n  // NEW: Compassion and affirmation guidelines\n  private getCompassionAndAffirmationGuidelines(): string {\n    const compassionLevel = {\n      standard: \"Include occasional empathetic statements\",\n      high: \"Regularly show understanding and support\",\n      maximum: \"Lead with compassion and frequent affirmation in every interaction\",\n    };\n\n    const affirmationFrequency = {\n      minimal: \"Occasionally affirm customer decisions\",\n      regular: \"Include affirmation in most responses\",\n      frequent: \"Affirm and encourage in every single interaction\",\n    };\n\n    return `COMPASSION & AFFIRMATION STRATEGY:\n\n**Compassion Level: ${compassionLevel[this.variables.compassion_level]}**\n**Affirmation Frequency: ${affirmationFrequency[this.variables.affirmation_frequency]}**\n\n**COMPASSIONATE PHRASES TO USE:**\n- \"I completely understand...\"\n- \"That makes total sense...\"\n- \"You're absolutely right to ask that...\"\n- \"I hear what you're saying...\"\n- \"That's a really smart question...\"\n\n**AFFIRMATION PHRASES TO USE:**\n- \"You're making a great choice...\"\n- \"You're definitely on the right track...\"\n- \"That's exactly what I'd recommend...\"\n- \"You're being very wise about this...\"\n- \"I'm so glad you asked that...\"\n\n**CRITICAL:** Reiterate compassion AND affirmation in EVERY customer interaction. Never skip this - it's essential for building trust and moving customers forward.`;\n  }\n\n  // NEW: Form completion strategy\n  private getFormCompletionStrategy(): string {\n    if (this.variables.form_completion_priority === \"low\") {\n      return \"Mention form completion when relevant.\";\n    }\n\n    const priorities = {\n      medium: \"Regularly encourage form completion\",\n      high: \"Make form completion the primary goal of every interaction\",\n    };\n\n    return `FORM COMPLETION PRIORITY: ${priorities[this.variables.form_completion_priority as keyof typeof priorities]}\n\n**PRIMARY GOAL: Get customer to complete the form fill and application**\n\n**FORM COMPLETION PHRASES:**\n- \"I'm creating your price now, get more info on the vehicle\" (CRITICAL EXAMPLE)\n- \"Let me get your application started so I can show you exact numbers\"\n- \"The fastest way to get your approval is to complete this quick form\"\n- \"I can give you precise details once we finish your application\"\n- \"Let's get you pre-qualified - it only takes 2 minutes\"\n\n**STRATEGY:**\n1. Always tie answers back to completing the application\n2. Make form completion feel like progress toward their goal\n3. Use urgency and value to motivate completion\n4. Position the form as the solution to their questions`;\n  }\n\n  // NEW: Alternative solutions guidance\n  private getAlternativeSolutionsGuidance(): string {\n    if (!this.variables.alternative_solutions) {\n      return \"\";\n    }\n\n    return `ALTERNATIVE SOLUTIONS STRATEGY:\n\n**If customer is concerned about approval or has credit challenges:**\n\n**SUGGEST CO-SIGNER OPTION:**\n- \"If you have a family member or friend with good credit, a co-signer can really help your approval odds\"\n- \"A co-signer basically guarantees you'll get approved and often gets you a better rate too\"\n- \"Many of our customers use a co-signer to secure their financing - it's very common\"\n\n**SUGGEST TRADE-IN OPTION:**\n- \"Do you have a vehicle to trade in? That can significantly improve your approval chances\"\n- \"A trade-in acts as a down payment and shows lenders you're serious\"\n- \"Even an older vehicle can help - trade value often surprises people\"\n\n**COMBINATION APPROACH:**\n- \"Between a co-signer and trade-in, we can usually find a solution for anyone\"\n- \"Let's explore all your options - co-signer, trade-in, or both\"\n\n**TIMING:** Introduce these options when customer expresses concern about approval, not immediately.`;\n  }\n\n  private getPersonalityDescription(): string {\n    const styles = {\n      casual: \"friendly and approachable\",\n      professional: \"experienced and knowledgeable\",\n      warm: \"caring and empathetic\",\n    };\n    return styles[this.variables.greeting_style];\n  }\n\n  private getToneInstructions(): string {\n    const enthusiasm = {\n      low: \"Maintain a calm, steady tone.\",\n      medium: \"Use moderate enthusiasm and energy.\",\n      high: \"Be energetic and highly enthusiastic.\",\n    };\n\n    const formality = {\n      informal: \"Use casual, conversational language.\",\n      \"semi-formal\": \"Balance professional and friendly language.\",\n      formal: \"Use professional, polished language.\",\n    };\n\n    return `TONE GUIDELINES:\n- ${enthusiasm[this.variables.enthusiasm_level]}\n- ${formality[this.variables.formality]}\n- Always sound confident and solution-oriented\n- Maintain optimism even when addressing challenges`;\n  }\n\n  private getResponseStructureGuidelines(): string {\n    const lengths = {\n      short: \"Keep responses under 3 sentences per thought.\",\n      medium: \"Use 3-5 sentences per thought.\",\n      long: \"Use detailed explanations with 5+ sentences per thought.\",\n    };\n\n    return `RESPONSE STRUCTURE:\n- ${lengths[this.variables.max_response_length]}\n- Always end with a clear next step or question\n- Include a progress indicator when possible\n- Balance information with forward momentum`;\n  }\n\n  private getLanguageConstraints(): string {\n    let constraints = \"LANGUAGE GUIDELINES:\\n\";\n\n    if (this.variables.avoid_words.length > 0) {\n      constraints += `- NEVER use: ${this.variables.avoid_words.join(\", \")}\\n`;\n    }\n\n    if (Object.keys(this.variables.preferred_terms).length > 0) {\n      constraints += \"- USE INSTEAD:\\n\";\n      Object.entries(this.variables.preferred_terms).forEach(([key, value]) => {\n        constraints += `  * Say \"${value}\" instead of \"${key}\"\\n`;\n      });\n    }\n\n    return constraints;\n  }\n\n  private getComplianceConstraints(): string {\n    let constraints = \"COMPLIANCE REQUIREMENTS:\\n\";\n\n    if (this.variables.never_mention.length > 0) {\n      constraints += `- NEVER mention: ${this.variables.never_mention.join(\", \")}\\n`;\n    }\n\n    if (this.variables.always_include.length > 0) {\n      constraints += `- ALWAYS mention: ${this.variables.always_include.join(\", \")}\\n`;\n    }\n\n    // Phone collection strategy\n    if (this.variables.phone_collection_enabled) {\n      const phoneStrategies = {\n        soft_ask: \"Gently request phone number when natural\",\n        incentivized: \"Offer faster service in exchange for phone number\",\n        direct: \"Request phone number directly for immediate assistance\",\n      };\n\n      constraints += `\\nPHONE COLLECTION STRATEGY:\\n- ${phoneStrategies[this.variables.phone_collection_approach]}\\n`;\n      constraints += `- Priority: ${this.variables.phone_collection_priority}\\n`;\n      \n      if (this.variables.phone_collection_priority === \"required\") {\n        constraints += \"- Position phone number as required for best service\\n\";\n        constraints += \"- Example: 'I can get you exact numbers if you give me a quick call at [phone]'\\n\";\n      }\n    }\n\n    return constraints;\n  }\n\n  // Enhanced response application with new strategies\n  applyToResponse(baseResponse: string, context: any): string {\n    let response = baseResponse;\n\n    // Apply language preferences\n    this.variables.avoid_words.forEach(word => {\n      const regex = new RegExp(`\\\\b${word}\\\\b`, \"gi\");\n      response = response.replace(regex, this.variables.preferred_terms[word] || \"customers\");\n    });\n\n    // Apply YES-first approach\n    if (this.variables.yes_first_approach) {\n      response = this.applyYesFirstApproach(response);\n    }\n\n    // Add progress reinforcement\n    if (this.variables.progress_reinforcement) {\n      response = this.addProgressIndicators(response);\n    }\n\n    // Add compassion and affirmation\n    response = this.addCompassionAndAffirmation(response);\n\n    return response;\n  }\n\n  private applyYesFirstApproach(response: string): string {\n    // Check if response contains a positive answer\n    const positiveIndicators = [\"can\", \"will\", \"yes\", \"absolutely\", \"definitely\", \"of course\"];\n    const hasPositive = positiveIndicators.some(indicator => \n      response.toLowerCase().includes(indicator)\n    );\n\n    if (hasPositive && !response.toLowerCase().startsWith(\"yes\")) {\n      // Restructure to lead with \"Yes\"\n      return response.replace(/^(\\w+)/, \"Yes! $1\");\n    }\n\n    return response;\n  }\n\n  private addProgressIndicators(response: string): string {\n    const progressPhrases = [\n      \"I'm creating your price now\",\n      \"Let me check your options\",\n      \"I'm pulling up your qualification\",\n      \"Perfect! I'm getting your details now\"\n    ];\n\n    // Add a progress phrase if none exists\n    if (!progressPhrases.some(phrase => response.includes(phrase))) {\n      const randomPhrase = progressPhrases[Math.floor(Math.random() * progressPhrases.length)];\n      response = response + \" \" + randomPhrase + \".\";\n    }\n\n    return response;\n  }\n\n  private addCompassionAndAffirmation(response: string): string {\n    const affirmationPhrases = [\n      \"You're asking all the right questions\",\n      \"That's a really smart concern\",\n      \"You're being very thorough\",\n      \"I completely understand\"\n    ];\n\n    // Add affirmation if response doesn't already have compassionate language\n    const hasCompassion = [\"understand\", \"makes sense\", \"great question\", \"smart\"].some(word => \n      response.toLowerCase().includes(word)\n    );\n\n    if (!hasCompassion && this.variables.affirmation_frequency === \"frequent\") {\n      const randomAffirmation = affirmationPhrases[Math.floor(Math.random() * affirmationPhrases.length)];\n      response = randomAffirmation + \". \" + response;\n    }\n\n    return response;\n  }\n}\n\n// Global instance with enhanced strategy\nexport const promptVariableManager = new PromptVariableManager();\n