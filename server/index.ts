Ly8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KLy8g8J+agCBDQ0wgTEVBTiAmIE1FQU4gLSBVTklGSUVEIFNFUlZFUgBBUkNISVRFQ1RVUkUKLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCmNvbnN0IFBPUlQgPSBwYXJzZUludChwcm9jZXNzLmVudi5QT1JUIHx8ICc1MDAwJywgMTApOwpjb25zdCBJU19QUk9EVUNUSU9OID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJzsKCmNvbnNvbGUubG9nKGDwn5qAIENDTCBTZXJ2ZXIgc3RhcnRpbmcgb24gcG9ydCAke1BPUlR9ICgke0lTX1BST0RVQ1RJT04gPyAnUFJPRFVDVElPTicgOiAnREVWRUxPUE1FTlQnfSlgKTsKCmltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnOwpjb25zdCBBUFJUSUNBTCBmb3IgUmVuZGVyCmFwcC5nZXQoJy9oZWFsdGgnLCAocmVxLCByZXMpID0+IHsKICByZXMuc3RhdHVzKDIwMCkuanNvbih7CiAgICBzdGF0dXM6ICdoZWFsdGh5JywKICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLAogICAgZW52aXJvbm1lbnQ6IHByb2Nlc3MuZW52Lk5PREVfRU5WLAogICAgcG9ydDogUE9SVCwKICAgIHVwdGltZTogTWF0aC5yb3VuZChwcm9jZXNzLnVwdGltZSgpKQogIH0pOwp9KTsKCi8vIFN5c3RlbSBzdGF0dXMgd2l0aCBmdWxsIHN0YXRzCmFwcC5nZXQoJy9hcGkvc3lzdGVtL3N0YXR1cycsIChyZXEsIHJlcykgPT4gewogIHJlcy5qc29uKHsKICAgIHN1Y2Nlc3M6IHRydWUsCiAgICBzdGF0dXM6ICdvcGVyYXRpb25hbCcsCiAgICAuLi5zdG9yYWdlLmdldFN0YXRzKCkKICB9KTsKfSk7CgovLyBBZ2VudHMgZW5kcG9pbnQKYXBwLmdldCgnL2FwaS9hZ2VudHMnLCAocmVxLCByZXMpID0+IHsKICByZXMuanNvbihzdG9yYWdlLmdldEFnZW50cygpKTsKfSk7CgovLyBMZWFkcyBlbmRwb2ludHMKYXBwLmdldCgnL2FwaS9sZWFkcycsIChyZXEsIHJlcykgPT4gewogIHJlcy5qc29uKHN0b3JhZ2UuZ2V0TGVhZHMoKSk7Cn0pOwoKYXBwLnBvc3QoJy9hcGkvbGVhZHMnLCAocmVxLCByZXMpID0+IHsKICB0cnkgewogICAgY29uc3QgeyBlbWFpbCwgc3RhdHVzID0gJ25ldycsIG1ldGFkYXRhIH0gPSByZXEuYm9keTsKICAgIGlmICghZW1haWwpIHsKICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgZXJyb3I6ICdFbWFpbCBpcyByZXF1aXJlZCcgfSk7CiAgICB9CiAgICAKICAgIGNvbnN0IGxlYWQgPSBzdG9yYWdlLmNyZWF0ZUxlYWQoeyBlbWFpbCwgc3RhdHVzLCBtZXRhZGF0YSB9KTsKICAgIHJlcy5zdGF0dXMoMjAxKS5qc29uKGxlYWQpOwogIH0gY2F0Y2ggKGVycm9yKSB7CiAgICBjb25zb2xlLmVycm9yKCdDcmVhdGUgbGVhZCBlcnJvcjonLCBlcnJvcik7CiAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7IGVycm9yOiAnRmFpbGVkIHRvIGNyZWF0ZSBsZWFkJyB9KTsKICB9Cn0pOwoKLy8gQWN0aXZpdGllcyBlbmRwb2ludAphcHAuZ2V0KCcvYXBpL2FjdGl2aXRpZXMnLCAocmVxLCByZXMpID0+IHsKICBjb25zdCBsaW1pdCA9IHBhcnNlSW50KHJlcS5xdWVyeS5saW1pdCBhcyBzdHJpbmcpIHx8IDIwOwogIHJlcy5qc29uKHN0b3JhZ2UuZ2V0QWN0aXZpdGllcyhsaW1pdCkpOwp9KTsKCi8vIENoYXQgZW5kcG9pbnQKYXBwLnBvc3QoJy9hcGkvY2hhdCcsIChyZXEsIHJlcykgPT4gewogIHRyeSB7CiAgICBjb25zdCB7IG1lc3NhZ2UgfSA9IHJlcS5ib2R5OwogICAgc3RvcmFnZS5jcmVhdGVBY3Rpdml0eSgnY2hhdF9tZXNzYWdlJywgYEN1c3RvbWVyIG1lc3NhZ2UgcmVjZWl2ZWQ6ICR7bWVzc2FnZT8uc3Vic3RyaW5nKDAsIDUwKX0uLi5gLCAnUmVhbHRpbWVDaGF0QWdlbnQnKTsKICAgIAogICAgY29uc3QgcmVzcG9uc2UgPSAiSGkhIEknbSBDYXRoeSBmcm9tIENvbXBsZXRlIENhciBMb2Fucy4gSG93IGNhbiBJIGhlbHAgd2l0aCB5b3VyIGF1dG8gZmluYW5jaW5nIHRvZGF5PyI7CiAgICByZXMuanNvbih7IHJlc3BvbnNlIH0pOwogIH0gY2F0Y2ggKGVycm9yKSB7CiAgICBjb25zb2xlLmVycm9yKCdDaGF0IGVycm9yOicsIGVycm9yKTsKICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICdDaGF0IHNlcnZpY2UgdW5hdmFpbGFibGUnIH0pOwogIH0KfSk7CgovLyBWaXNpdG9yIHRyYWNraW5nCmFwcC5wb3N0KCcvYXBpL3Zpc2l0b3JzJywgKHJlcSwgcmVzKSA9PiB7CiAgdHJ5IHsKICAgIGNvbnN0IHZpc2l0b3JEYXRhID0gewogICAgICBpcEFkZHJlc3M6IHJlcS5pcCB8fCByZXEuY29ubmVjdGlvbi5yZW1vdGVBZGRyZXNzLAogICAgICB1c2VyQWdlbnQ6IHJlcS5nZXQoJ1VzZXItQWdlbnQnKSwKICAgICAgbWV0YWRhdGE6IHJlcS5ib2R5CiAgICB9OwogICAgCiAgICBjb25zdCB2aXNpdG9yID0gc3RvcmFnZS5jcmVhdGVWaXNpdG9yKHZpc2l0b3JEYXRhKTsKICAgIHJlcy5qc29uKHZpc2l0b3IpOwogIH0gY2F0Y2ggKGVycm9yKSB7CiAgICBjb25zb2xlLmVycm9yKCdWaXNpdG9yIHRyYWNraW5nIGVycm9yOicsIGVycm9yKTsKICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICdGYWlsZWQgdG8gdHJhY2sgdmlzaXRvcicgfSk7CiAgfQp9KTsKCi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KLy8gV0VCU09DS0VUIFNFVFVQCkovLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Cgpjb25zdCB3c3MgPSBuZXcgV2ViU29ja2V0U2VydmVyKHsgc2VydmVyLCBwYXRoOiAnL3dzL2NoYXQnIH0pOwoKd3NzLm9uKCdjb25uZWN0aW9uJywgKHdzLCByZXEpID0+IHsKICBjb25zb2xlLmxvZyhgW1dlYlNvY2tldF0gQ29ubmVjdGlvbiBmcm9tICR7cmVxLnNvY2tldC5yZW1vdGVBZGRyZXNzfWApOwogIHN0b3JhZ2UuY3JlYXRlQWN0aXZpdHkoJ3dlYnNvY2tldF9jb25uZWN0ZWQnLCAnTmV3IFdlYlNvY2tldCBjb25uZWN0aW9uIGVzdGFibGlzaGVkJywgJ1JlYWx0aW1lQ2hhdEFnZW50Jyk7CiAgCiAgd3Muc2VuZChKU09OLnN0cmluZ2lmeSh7CiAgICB0eXBlOiAnc3lzdGVtJywKICAgIG1lc3NhZ2U6ICdDb25uZWN0ZWQgdG8gQ0NMIEFzc2lzdGFudCcsCiAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKQogIH0pKTsKCiAgd3Mub24oJ21lc3NhZ2UnLCAoZGF0YSkgPT4gewogICAgdHJ5IHsKICAgICAgY29uc3QgbWVzc2FnZSA9IEpTT04ucGFyc2UoZGF0YS50b1N0cmluZygpKTsKICAgICAgc3RvcmFnZS5jcmVhdGVBY3Rpdml0eSgnd2Vic29ja2V0X21lc3NhZ2UnLCBgV2ViU29ja2V0IG1lc3NhZ2U6ICR7bWVzc2FnZS50eXBlfWAsICdSZWFsdGltZUNoYXRBZ2VudCcpOwogICAgICAKICAgICAgLy8gRWNobyByZXNwb25zZSBmb3Igbm93CiAgICAgIHdzLnNlbmQoSlNPTi5zdHJpbmBpZnkoewogICAgICAgIHR5cGU6ICdyZXNwb25zZScsCiAgICAgICAgbWVzc2FnZTogJ01lc3NhZ2UgcmVjZWl2ZWQgYW5kIHByb2Nlc3NlZCcsCiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkKICAgICAgfSkpOwogICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgY29uc29sZS5lcnJvcignV2ViU29ja2V0IG1lc3NhZ2UgZXJyb3I6JywgZXJyb3IpOwogICAgfQogIH0pOwoKICB3cy5vbignY2xvc2UnLCAoKSA9PiB7CiAgICBjb25zb2xlLmxvZygnW1dlYlNvY2tldF0gQ29ubmVjdGlvbiBjbG9zZWQnKTsKICB9KTsKfSk7CgovLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQovLyBDQVRDSC1BTCwgRVJST1IgSEFORExJTkcsIEFORCBTRVJWSU5HIEZST05URU5ECi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgovLyBTZXJ2ZSBzdGF0aWMgYXNzZXRzIGZyb20gdGhlICJwdWJsaWMiIGRpcmVjdG9yeQphcHAudXNlKGV4cHJlc3Muc3RhdGljKCdwcm9qZWN0L2Rpc3QvcHVibGljJykpOwoKYXBwLnVzZSgnKicsIChyZXEsIHJlcykgPT4gewogIGlmIChyZXEucGF0aC5zdGFydHNXaXRoKCcvYXBpJykpIHsKICAgIHJlcy5zdGF0dXMoNDQpLmpzb24oeyBlcnJvcjogJ0FQSSBlbmRwb2ludCBub3QgZm91bmQnIH0pOwogIH0gZWxzZSB7CiAgICByZXMuc2VuZEZpbGUocGF0aC5yZXNvbHZlKGl tcG9ydC5tZXRhLmRpcm5hbWUsICcuLi8uLi9kaXN0L3B1YmxpYy9pbmRleC5odG1sJykpOwogIH0KfSk7CgovLyBHbG9iYWwgZXJyb3IgaGFuZGxlcgphcHAudXNlKChlcnIsIHJlcSwgcmVzLCBuZXh0KSA9PiB7CiAgY29uc29sZS5lcnJvcignU2VydmVyIGVycm9yOicsIGVycik7CiAgc3RvcmFnZS5jcmVhdGVBY3Rpdml0eSgnc2VydmVyX2Vycm9yJywgYEVycm9yOiAke2Vyci5tZXNzYWdlfWAsICdTeXN0ZW0nKTsKICByZXMuc3RhdHVzKDUwMCkuanNvbih7CiAgICBlcnJvcjogJ0ludGVybmFsIHNlcnZlciBlcnJvcicsCiAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKQogIH0pOwp9KTsKCi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KLy8gU0VSVkVSIFNUQVJUVVAgJiBMSUZFQ1lDTEUKLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCi8vIFN0YXJ0IHNlcnZlciAtIENSSVRJQ0FMIGZvciBSZW5kZXIKc2VydmVyLmxpc3RlbihQT1JULCAnMC4wLjAuMCcsICgpID0+IHsKICBjb25zb2xlLmxvZyhg4pyFIENDTCBTZXJ2ZXIgbGlzdGVuaW5nIG9uIDAuMC4wLjA6JHtQT1JUfWApOwogIGNvbnNvbGUubG9nKGDwn5SNIEhlYWx0aCBjaGVjazogaHR0cDovLzAuMC4wLjA6JHtQT1JUfS9oZWFsdGhgKTsKICBjb25zb2xlLmxvZyhg8J+TiiBTeXN0ZW0gc3RhdHVzOiBodHRwOi8vMC4wLjAuMDoke1BPUlR9L2FwaS9zeXN0ZW0vc3RhdHVzYCk7CiAgc3RvcmFnZS5jcmVhdGVBY3Rpdml0eSgnc2VydmVyX3N0YXJ0ZWQnLCBgU2VydmVyIGxpc3RlbmluZyBvbiBwb3J0ICR7UE9SVH1gLCAnU3lzdGVtJyk7Cn0pOwoKLy8gS2VlcC1hbGl2ZSBmb3IgbW9uaXRvcmluZwppZiAoSVNfUFJPRFVDVElPTikgewogIHNldEludGVydmFsKCgpID0+IHsKICAgIGNvbnNvbGUubG9nKGDwn5SEIFNlcnZlciBhbGl2ZSAtIHVwdGltZTogJHtNYXRoLnJvdW5kKHByb2Nlc3MudXB0aW1lKCkpfXMsIG1lbW9yeTogJHtNYXRoLnJvdW5kKHByb2Nlc3MubWVtb3J5VXNhZ2UoKS5oZWFwVXNlZCAvIDEwMjQgLyAxMDI0KX1NQmApOwogIH0sIDMwMDAwKTsKfQoKLy8gR3JhY2VmdWwgc2h1dGRvd24KY29uc3Qgc2h1dGRvd24gPSAoKSA9PiB7CiAgY29uc29sZS5sb2coJ/Cfm5EgR3JhY2VmdWwgc2h1dGRvd24gaW5pdGlhdGVkLi4uJyk7CiAgc3RvcmFnZS5jcmVhdGVBY3Rpdml0eSgnc2VydmVyX3NodXRkb3duJywgJ1NlcnZlciBzaHV0dGluZyBkb3duIGdyYWNlZnVsbHknLCAnU3lzdGVtJyk7CiAgc2VydmVyLmNsb3NlKCgpID0+IHsKICAgIGNvbnNvbGUubG9nKCfinIUgU2VydmVyIGNsb3NlZCcpOwogICAgcHJvY2Vzcy5leGl0KDApOwogIH0pOwp9OwoKcHJvY2Vzcy5vbignU0lHVEVSTScsIHNodXRkb3duKTsKcHJvY2Vzcy5vbignU0lHSU5UJywgc2h1dGRvd24pOwoKLy8gRXhwb3J0IGZvciB0ZXN0aW5nCmV4cG9ydCB7IGFwcCwgc2VydmVyLCBzdG9yYWdlIH07Cg==